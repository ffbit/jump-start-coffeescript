// Generated by CoffeeScript 1.4.0
(function() {
  var distance, game, gfx, square, test;

  gfx = {
    tileW: 24,
    tileH: 24,
    init: function() {
      var canvas;
      canvas = document.querySelector("#game");
      this.ctx = canvas != null ? typeof canvas.getContext === "function" ? canvas.getContext("2d") : void 0 : void 0;
      if (!this.ctx) {
        return false;
      }
      this.w = canvas.width;
      this.h = canvas.height;
      return true;
    },
    clear: function() {
      return this.ctx.clearRect(0, 0, this.w, this.h);
    },
    load: function(onload) {
      this.sprites = new Image();
      this.sprites.src = "resources/sprites.png";
      return this.sprites.onload = function() {
        return onload();
      };
    },
    drawSprite: function(col, row, x, y) {
      return this.ctx.drawImage(this.sprites, col * this.tileW, row * this.tileH, this.tileW, this.tileH, x, y, this.tileW, this.tileH);
    },
    drawSpriteFancy: function(col, row, x, y, w, h, scale) {}
  };

  game = {
    init: function() {
      if (!gfx.init()) {
        alert("Could not set up game canvas!");
        return;
      }
      gfx.clear();
      return gfx.load(function() {
        var c, col, rand, row, x, y, _i, _results;
        c = gfx.ctx;
        rand = function(max) {
          return Math.floor(Math.random() * max);
        };
        _results = [];
        for (y = _i = 0; _i < 20; y = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (x = _j = 0; _j < 24; x = ++_j) {
              col = rand(7);
              row = rand(2);
              _results1.push(gfx.drawSprite(col, row, x * gfx.tileW, y * gfx.tileH));
            }
            return _results1;
          })());
        }
        return _results;
      });
    }
  };

  game.init();

  square = function(x) {
    return x * x;
  };

  distance = function(x1, y1, x2, y2) {
    return Math.sqrt(square(x1 - x2) + square(y1 - y2));
  };

  test = function() {
    return alert(distance(2, 3, 5, 5));
  };

  test();

}).call(this);
